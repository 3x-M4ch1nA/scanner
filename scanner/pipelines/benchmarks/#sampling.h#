#pragma once

#include "scanner/eval/pipeline_description.h"

namespace scanner {

void benchmark_sampling(const DatasetInformation &info,
                        PipelineDescription &desc,
                        bool is_flow) {
o'charade': {'caffe': [(111.92460083961487, 2876, {'load': 93309.29, 'net': 2277.09, 'save': 12.21, 'transform': 6919.25, 'eval': 9196.56}), (48.765724897384644, 2876, {'load': 27277.64, 'net': 2246.17, 'save': 10.76, 'transform': 3510.01, 'eval': 5756.29}), (27.57507300376892, 2876, {'load': 11693.64, 'net': 2271.9, 'save': 9.07, 'transform': 3598.98, 'eval': 5870.96})], 'flow': [(62.23089098930359, 2876, {'load': 4564.05, 'save': 2391.26, 'eval': 34611.55}), (45.65284490585327, 2876, {'load': 1854.57, 'save': 1897.61, 'eval': 17739.38}), (56.71312999725342, 2876, {'load': 94.4, 'save': 1695.08, 'eval': 34578.75})], 'histogram': [(84.16281700134277, 2876, {'load': 23924.1, 'save': 6.44, 'eval': 12090.44}), (51.17519807815552, 2876, {'load': 31607.08, 'save': 5.96, 'eval': 12761.04}), (11.20070195198059, 2876, {'load': 3200.17, 'setup': 140.0, 'save': 5.64, 'eval': 951.0})]}}
}
PipelineDescription get_pipeline_description(const DatasetInformation& info) {
  PipelineDescription desc;
  Sampler::all_frames(info, desc);

  DeviceType device_type;
  VideoDecoderType decoder_type;

#ifdef HAVE_CUDA
  device_type = DeviceType::GPU;
  decoder_type = VideoDecoderType::NVIDIA;
#else
  device_type = DeviceType::CPU;
  decoder_type = VideoDecoderType::SOFTWARE;
#endif

  std::vector<std::unique_ptr<EvaluatorFactory>>& factories =
      desc.evaluator_factories;

  factories.emplace_back(
      new DecoderEvaluatorFactory(device_type, decoder_type));
  factories.emplace_back(new OpticalFlowEvaluatorFactory(device_type));

  return desc;
}

REGISTER_PIPELINE(flow_benchmark, get_pipeline_description);
}
}
