syntax = "proto2";

package scanner;

message DatabaseDescriptor {
  message Dataset {
    required int32 id = 1;
    required string name = 2;
  }

  message Job {
    required int32 id = 1;
    required string name = 2;
  }

  message JobToDataset {
    required int32 job_id = 1;
    required int32 dataset_id = 2;
  }

  optional int32 next_dataset_id = 1;
  optional int32 next_job_id = 2;
  repeated Dataset datasets = 3;
  repeated Job jobs = 4;
  repeated JobToDataset job_to_datasets = 5;
}

enum ImageEncodingType {
  JPEG = 0;
  PNG = 1;
}

enum ImageColorSpace {
  Gray = 0;
  RGB = 1;
  RGBA = 2;
}

enum DatasetType {
  DatasetType_Video = 0;
  DatasetType_Image = 1;
}

message DatasetDescriptor {
  message VideoMetadata {
    optional int64 total_frames = 4;

    /// Across video
    // Number of frames
    optional int32 min_frames = 5;
    optional int32 average_frames = 6;
    optional int32 max_frames = 7;

    // Frame width
    optional int32 min_width = 8;
    optional int32 average_width = 9;
    optional int32 max_width = 10;

    // Frame height
    optional int64 min_height = 11;
    optional int64 average_height = 12;
    optional int64 max_height = 13;

    repeated string original_video_paths = 1;
    repeated string video_names = 2;
    repeated int32 video_ids = 14;
  }

  message ImageMetadata {
    message FormatGroup {
      required ImageEncodingType encoding_type = 1;
      required ImageColorSpace color_space = 2;
      required int32 width = 3;
      required int32 height = 4;
      required int32 num_images = 5;
    }

    required int64 total_images = 5;

    /// Across video
    // Frame width
    optional int32 min_width = 8;
    optional int32 average_width = 9;
    optional int32 max_width = 10;

    // Frame height
    optional int64 min_height = 11;
    optional int64 average_height = 12;
    optional int64 max_height = 13;

    repeated string original_image_paths = 1;
    repeated int64 original_index_to_format_group = 2;
    repeated string valid_image_paths = 3;
    repeated FormatGroup format_groups = 4;
    repeated int32 format_group_ids = 14;
  }

  required int32 id = 1;
  required string name = 2;
  required DatasetType type = 3;
  optional VideoMetadata video_data = 4;
  optional ImageMetadata image_data = 5;
}

message VideoDescriptor {
  enum VideoCodecType {
    H264 = 0;
  }

  enum VideoChromaFormat {
    Monochrome = 0;
    YUV_420 = 1;
    YUV_422 = 2;
    YUV_444 = 3;
  }

  required int32 id = 1;
  required int32 frames = 2;
  required int32 width = 3;
  required int32 height = 4;

  optional VideoCodecType codec_type = 5;
  optional VideoChromaFormat chroma_format = 7;

  repeated int64 keyframe_positions = 8 [packed=true];
  repeated int64 keyframe_timestamps = 9 [packed=true];
  repeated int64 keyframe_byte_offsets = 10 [packed=true];
  optional bytes metadata_packets = 6;
}

message ImageFormatGroupDescriptor {
  required int32 id = 1;
  required ImageEncodingType encoding_type = 2;
  required ImageColorSpace color_space = 3;
  required int32 width = 4;
  required int32 height = 5;
  required int32 num_images = 7;
  repeated int64 compressed_sizes = 6 [packed=true];
}

message WebTimestamps {
  required int32 time_base_numerator = 1;
  required int32 time_base_denominator = 2;
  repeated int64 dts_timestamps = 3 [packed=true];
  repeated int64 pts_timestamps = 4 [packed=true];
}

message JobDescriptor {
  enum Sampling {
    All = 0;
    Strided = 1;
    Gather = 2;
    SequenceGather = 3;
  }

  message Column {
    required int32 id = 1;
    required string name = 2;
  }

  message PointSamples {
    optional int32 video_index = 1;
    repeated int32 frames = 2;
  }

  message StridedInterval {
    required int32 start = 1;
    required int32 end = 2;
    required int32 stride = 3;
  }

  message SequenceSamples {
    optional int32 video_index = 1;
    repeated StridedInterval intervals = 2;
  }

  required int32 id = 1;
  required string name = 12;
  repeated Column columns = 2;
  required Sampling sampling = 3;
  required int32 work_item_size = 4;
  required int32 num_nodes = 5;
  required string in_job_name = 10;
  required bool derived = 11;

  // For strided sampling
  optional int32 stride = 6;
  optional int32 offset = 13;
  // For gather sampling
  repeated PointSamples gather_points = 7;
  // For sequence gather sampling
  repeated SequenceSamples gather_sequences = 8;
  // For derived datasets
  repeated PointSamples derived_frames = 9;
}

message DecodeArgs {
  enum Sampling {
    All = 1;
    Strided = 2;
    Gather = 3;
    SequenceGather = 4;
  }

  message StridedInterval {
    required int32 start = 1;
    required int32 end = 2;
    required int32 stride = 3;
  }

  required int32 start_keyframe = 1;
  required int32 end_keyframe = 2;
  required int32 warmup_count = 3;
  required int32 rows_from_start = 9;
  required Sampling sampling = 4;

  optional StridedInterval interval = 5;
  optional int32 stride = 6;
  repeated int32 gather_points = 7;
  repeated StridedInterval gather_sequences = 8;
}

message ImageDecodeArgs {
  enum Sampling {
    All = 1;
    Strided = 2;
    Gather = 3;
    SequenceGather = 4;
  }

  message StridedInterval {
    required int32 start = 1;
    required int32 end = 2;
    required int32 stride = 3;
  }

  required ImageEncodingType encoding_type = 1;
  required ImageColorSpace color_space = 2;
  required int32 warmup_count = 3;
  required int32 rows_from_start = 9;
  required Sampling sampling = 4;

  optional StridedInterval interval = 5;
  optional int32 stride = 6;
  repeated int32 gather_points = 7;
  repeated StridedInterval gather_sequences = 8;

  repeated int64 compressed_sizes = 10 [packed=true];
}
